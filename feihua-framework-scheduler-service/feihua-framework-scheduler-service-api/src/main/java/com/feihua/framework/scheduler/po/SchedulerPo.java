package com.feihua.framework.scheduler.po;

import feihua.jdbc.api.pojo.BasePo;

/**
 * This class was generated by MyBatis Generator.
 * @author yangwei 2019-04-16 09:51:01
 * Database Table Remarks:
 *   任务计划表
 *
 * This class corresponds to the database table scheduler
 * @mbg.generated do_not_delete_during_merge 2019-04-16 09:51:01
*/
public class SchedulerPo extends feihua.jdbc.api.pojo.BasePo<String> {
    /**
     * Database Column Remarks:
     *   名称
     *
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column scheduler.name
     *
     * @mbg.generated 2019-04-16 09:51:01
     */
    private String name;

    /**
     * Database Column Remarks:
     *   任务名称
     *
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column scheduler.job_name
     *
     * @mbg.generated 2019-04-16 09:51:01
     */
    private String jobName;

    /**
     * Database Column Remarks:
     *   任务类全路径
     *
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column scheduler.job_class
     *
     * @mbg.generated 2019-04-16 09:51:01
     */
    private String jobClass;

    /**
     * Database Column Remarks:
     *   任务组名称
     *
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column scheduler.job_group
     *
     * @mbg.generated 2019-04-16 09:51:01
     */
    private String jobGroup;

    /**
     * Database Column Remarks:
     *   触发器名称
     *
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column scheduler.trigger_name
     *
     * @mbg.generated 2019-04-16 09:51:01
     */
    private String triggerName;

    /**
     * Database Column Remarks:
     *   触发器组名称
     *
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column scheduler.trigger_group
     *
     * @mbg.generated 2019-04-16 09:51:01
     */
    private String triggerGroup;

    /**
     * Database Column Remarks:
     *   触发器时间表达式
     *
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column scheduler.trigger_cron_expression
     *
     * @mbg.generated 2019-04-16 09:51:01
     */
    private String triggerCronExpression;

    /**
     * Database Column Remarks:
     *   触发器时间表达式描述
     *
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column scheduler.trigger_cron_expression_desc
     *
     * @mbg.generated 2019-04-16 09:51:01
     */
    private String triggerCronExpressionDesc;

    /**
     * Database Column Remarks:
     *   执行次数
     *
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column scheduler.excute_num
     *
     * @mbg.generated 2019-04-16 09:51:01
     */
    private Integer excuteNum;

    /**
     * Database Column Remarks:
     *   平均执行时间，单位ms
     *
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column scheduler.excute_avg_time
     *
     * @mbg.generated 2019-04-16 09:51:01
     */
    private String excuteAvgTime;

    /**
     * Database Column Remarks:
     *   备注
     *
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database column scheduler.description
     *
     * @mbg.generated 2019-04-16 09:51:01
     */
    private String description;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getJobName() {
        return jobName;
    }

    public void setJobName(String jobName) {
        this.jobName = jobName;
    }

    public String getJobClass() {
        return jobClass;
    }

    public void setJobClass(String jobClass) {
        this.jobClass = jobClass;
    }

    public String getJobGroup() {
        return jobGroup;
    }

    public void setJobGroup(String jobGroup) {
        this.jobGroup = jobGroup;
    }

    public String getTriggerName() {
        return triggerName;
    }

    public void setTriggerName(String triggerName) {
        this.triggerName = triggerName;
    }

    public String getTriggerGroup() {
        return triggerGroup;
    }

    public void setTriggerGroup(String triggerGroup) {
        this.triggerGroup = triggerGroup;
    }

    public String getTriggerCronExpression() {
        return triggerCronExpression;
    }

    public void setTriggerCronExpression(String triggerCronExpression) {
        this.triggerCronExpression = triggerCronExpression;
    }

    public String getTriggerCronExpressionDesc() {
        return triggerCronExpressionDesc;
    }

    public void setTriggerCronExpressionDesc(String triggerCronExpressionDesc) {
        this.triggerCronExpressionDesc = triggerCronExpressionDesc;
    }

    public Integer getExcuteNum() {
        return excuteNum;
    }

    public void setExcuteNum(Integer excuteNum) {
        this.excuteNum = excuteNum;
    }

    public String getExcuteAvgTime() {
        return excuteAvgTime;
    }

    public void setExcuteAvgTime(String excuteAvgTime) {
        this.excuteAvgTime = excuteAvgTime;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public com.feihua.framework.scheduler.api.ApiSchedulerPoService service() {
        return com.feihua.utils.spring.SpringContextHolder.getBean(com.feihua.framework.scheduler.api.ApiSchedulerPoService.class);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(getClass().getSimpleName());
        sb.append(" [");
        sb.append("Hash = ").append(hashCode());
        sb.append(", name=").append(name);
        sb.append(", jobName=").append(jobName);
        sb.append(", jobClass=").append(jobClass);
        sb.append(", jobGroup=").append(jobGroup);
        sb.append(", triggerName=").append(triggerName);
        sb.append(", triggerGroup=").append(triggerGroup);
        sb.append(", triggerCronExpression=").append(triggerCronExpression);
        sb.append(", triggerCronExpressionDesc=").append(triggerCronExpressionDesc);
        sb.append(", excuteNum=").append(excuteNum);
        sb.append(", excuteAvgTime=").append(excuteAvgTime);
        sb.append(", description=").append(description);
        sb.append("]");
        return sb.toString();
    }
}