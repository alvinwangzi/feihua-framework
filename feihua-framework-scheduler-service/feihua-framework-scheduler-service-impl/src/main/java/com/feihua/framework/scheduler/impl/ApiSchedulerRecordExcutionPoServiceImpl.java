package com.feihua.framework.scheduler.impl;

import com.feihua.framework.scheduler.api.ApiSchedulerRecordExcutionPoService;
import com.feihua.framework.scheduler.dto.SchedulerRecordExcutionDto;
import com.feihua.framework.scheduler.po.SchedulerRecordExcutionPo;
import com.github.pagehelper.Page;
import feihua.jdbc.api.pojo.PageResultDto;
import feihua.jdbc.api.service.impl.ApiBaseServiceImpl;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * This class was generated by MyBatis Generator.
 * @author yangwei 2019-04-19 15:59:05
 */
@Service
public class ApiSchedulerRecordExcutionPoServiceImpl extends ApiBaseServiceImpl<SchedulerRecordExcutionPo, SchedulerRecordExcutionDto, String> implements ApiSchedulerRecordExcutionPoService {
    @Autowired
    com.feihua.framework.scheduler.mapper.SchedulerRecordExcutionPoMapper SchedulerRecordExcutionPoMapper;

    public ApiSchedulerRecordExcutionPoServiceImpl() {
        super(SchedulerRecordExcutionDto.class);
    }

    @Override
    public PageResultDto<SchedulerRecordExcutionDto> searchSchedulerRecordExcutionsDsf(com.feihua.framework.scheduler.dto.SearchSchedulerRecordExcutionsConditionDto dto, feihua.jdbc.api.pojo.PageAndOrderbyParamDto pageAndOrderbyParamDto) {
        Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);
        List<com.feihua.framework.scheduler.dto.SchedulerRecordExcutionDto> list = this.wrapDtos(SchedulerRecordExcutionPoMapper.searchSchedulerRecordExcutions(dto));
        return new PageResultDto(list, this.wrapPage(p));
    }

    @Override
    public SchedulerRecordExcutionDto wrapDto(SchedulerRecordExcutionPo po) {
        if (po == null) { return null; }
        SchedulerRecordExcutionDto dto = new SchedulerRecordExcutionDto();
        dto.setId(po.getId());
        dto.setSchedulerId(po.getSchedulerId());
        dto.setStartTime(po.getStartTime());
        dto.setEndTime(po.getEndTime());
        dto.setDuration(po.getDuration());
        dto.setDataUserId(po.getDataUserId());
        dto.setDataOfficeId(po.getDataOfficeId());
        dto.setDataType(po.getDataType());
        dto.setDataAreaId(po.getDataAreaId());
        dto.setUpdateAt(po.getUpdateAt());
        dto.setBatchNo(po.getBatchNo());
        return dto;
    }
}