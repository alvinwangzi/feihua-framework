package com.feihua.framework.spider.impl;

import com.feihua.framework.spider.api.ApiSpiderConfigSourcePoService;
import com.feihua.framework.spider.dto.SpiderConfigSourceDto;
import com.feihua.framework.spider.mapper.SpiderConfigSourcePoMapper;
import com.feihua.framework.spider.po.SpiderConfigSourcePo;
import com.github.pagehelper.Page;
import feihua.jdbc.api.pojo.BasePo;
import feihua.jdbc.api.pojo.PageResultDto;
import feihua.jdbc.api.service.impl.ApiBaseServiceImpl;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * This class was generated by MyBatis Generator.
 * @author yangwei 2018-12-19 17:13:35
 */
@Service
public class ApiSpiderConfigSourcePoServiceImpl extends ApiBaseServiceImpl<SpiderConfigSourcePo, SpiderConfigSourceDto, String> implements ApiSpiderConfigSourcePoService {
    @Autowired
    SpiderConfigSourcePoMapper SpiderConfigSourceMapper;

    public ApiSpiderConfigSourcePoServiceImpl() {
        super(SpiderConfigSourceDto.class);
    }

    @Override
    public PageResultDto<SpiderConfigSourceDto> searchSpiderConfigSourcesDsf(com.feihua.framework.spider.dto.SearchSpiderConfigSourcesConditionDto dto, feihua.jdbc.api.pojo.PageAndOrderbyParamDto pageAndOrderbyParamDto) {
        Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);
        List<com.feihua.framework.spider.dto.SpiderConfigSourceDto> list = this.wrapDtos(SpiderConfigSourceMapper.searchSpiderConfigSources(dto));
        return new PageResultDto(list, this.wrapPage(p));
    }

    @Override
    public SpiderConfigSourcePo selectByDomain(String domain) {
        if(StringUtils.isNotEmpty(domain)){
            SpiderConfigSourcePo spiderConfigSourcePo = new SpiderConfigSourcePo();
            spiderConfigSourcePo.setDomain(domain);
            spiderConfigSourcePo.setDelFlag(BasePo.YesNo.N.name());
            return this.selectOneSimple(spiderConfigSourcePo);
        }

        return null;
    }

    @Override
    public SpiderConfigSourceDto wrapDto(SpiderConfigSourcePo po) {
        if (po == null) { return null; }
        SpiderConfigSourceDto dto = new SpiderConfigSourceDto();
        dto.setId(po.getId());
        dto.setName(po.getName());
        dto.setDomain(po.getDomain());
        dto.setIsDynamic(po.getIsDynamic());
        dto.setDynamicWait(po.getDynamicWait());
        dto.setDataUserId(po.getDataUserId());
        dto.setDataOfficeId(po.getDataOfficeId());
        dto.setDataType(po.getDataType());
        dto.setDataAreaId(po.getDataAreaId());
        dto.setUpdateAt(po.getUpdateAt());
        return dto;
    }
}