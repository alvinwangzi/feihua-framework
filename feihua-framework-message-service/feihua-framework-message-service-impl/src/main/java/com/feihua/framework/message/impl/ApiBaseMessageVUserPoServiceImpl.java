package com.feihua.framework.message.impl;

import com.feihua.framework.constants.DictEnum;
import com.feihua.framework.message.api.ApiBaseMessageVUserPoService;
import com.feihua.framework.message.dto.BaseMessageVUserDto;
import com.feihua.framework.message.po.BaseMessageVUserPo;
import feihua.jdbc.api.service.impl.ApiBaseServiceImpl;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * This class was generated by MyBatis Generator.
 * @author yangwei 2019-05-07 15:21:48
 */
@Service
public class ApiBaseMessageVUserPoServiceImpl extends ApiBaseServiceImpl<BaseMessageVUserPo, BaseMessageVUserDto, String> implements ApiBaseMessageVUserPoService {
    @Autowired
    com.feihua.framework.message.mapper.BaseMessageVUserPoMapper BaseMessageVUserPoMapper;

    public ApiBaseMessageVUserPoServiceImpl() {
        super(BaseMessageVUserDto.class);
    }

    @Override
    public BaseMessageVUserDto wrapDto(BaseMessageVUserPo po) {
        if (po == null) { return null; }
        BaseMessageVUserDto dto = new BaseMessageVUserDto();
        dto.setId(po.getId());
        dto.setMessageId(po.getMessageId());
        dto.setIdentifier(po.getIdentifier());
        dto.setClientId(po.getClientId());
        dto.setMessageState(po.getMessageState());
        dto.setDataUserId(po.getDataUserId());
        dto.setDataOfficeId(po.getDataOfficeId());
        dto.setDataType(po.getDataType());
        dto.setDataAreaId(po.getDataAreaId());
        dto.setUpdateAt(po.getUpdateAt());
        return dto;
    }

    @Override
    public int updateMessageStage(String messageId, String identifier, String clientId, String currentUserId, DictEnum.MessageState messageState) {

        int r = 0;
        if (StringUtils.isAnyEmpty(messageId,identifier,clientId) || messageState == null) {
            return r;
        }

        BaseMessageVUserPo query = new BaseMessageVUserPo();
        query.setMessageState(messageId);
        query.setIdentifier(identifier);
        query.setClientId(clientId);

        BaseMessageVUserPo update = new BaseMessageVUserPo();
        update.setMessageState(messageState.name());
        update = preUpdate(update,currentUserId);

        r = updateSelective(update,query);
        return r;
    }
}