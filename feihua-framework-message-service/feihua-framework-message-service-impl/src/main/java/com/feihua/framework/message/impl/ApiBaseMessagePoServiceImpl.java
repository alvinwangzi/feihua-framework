package com.feihua.framework.message.impl;

import com.feihua.exception.BaseException;
import com.feihua.framework.base.modules.user.po.BaseUserPo;
import com.feihua.framework.message.api.ApiBaseMessagePoService;
import com.feihua.framework.message.api.ApiBaseMessageTargetClientPoService;
import com.feihua.framework.message.api.ApiBaseMessageTargetClientUserRelPoService;
import com.feihua.framework.message.api.ApiBaseMessageUserStatePoService;
import com.feihua.framework.message.dto.*;
import com.feihua.framework.message.handler.ApiMessageSendHandler;
import com.feihua.framework.message.handler.ApiMessageUsersHandler;
import com.feihua.framework.message.mapper.BaseMessagePoMapper;
import com.feihua.framework.message.po.BaseMessagePo;
import com.feihua.framework.constants.DictEnum;
import com.feihua.framework.message.po.BaseMessageTargetClientPo;
import com.feihua.framework.message.po.BaseMessageTargetClientUserRelPo;
import com.feihua.framework.message.po.BaseMessageUserStatePo;
import com.feihua.utils.spring.SpringContextHolder;
import com.github.pagehelper.Page;
import feihua.jdbc.api.pojo.BasePo;
import feihua.jdbc.api.pojo.PageAndOrderbyParamDto;
import feihua.jdbc.api.pojo.PageResultDto;
import feihua.jdbc.api.service.ApiPageIterator;
import feihua.jdbc.api.service.impl.ApiBaseServiceImpl;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Executor;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * This class was generated by MyBatis Generator.
 * @author yangwei 2018-10-29 19:58:54
 */
@Service
public class ApiBaseMessagePoServiceImpl extends ApiBaseServiceImpl<BaseMessagePo, BaseMessageDto, String> implements ApiBaseMessagePoService {
    @Autowired
    private BaseMessagePoMapper baseMessagePoMapper;

    public ApiBaseMessagePoServiceImpl() {
        super(BaseMessageDto.class);
    }

    @Autowired
    private List<ApiMessageSendHandler> apiMessageSendHandles;
    @Autowired
    private List<ApiMessageUsersHandler> apiMessageUsersHandlers;
    @Autowired
    private ApiBaseMessageUserStatePoService apiBaseMessageUserStatePoService;
    @Autowired
    private ApiBaseMessageTargetClientPoService apiBaseMessageTargetClientPoService;
    @Autowired
    private ApiBaseMessageTargetClientUserRelPoService apiBaseMessageTargetClientUserRelPoService;

    @Override
    public PageResultDto<BaseMessageDto> searchBaseMessagesDsf(com.feihua.framework.message.dto.SearchBaseMessagesConditionDto dto, feihua.jdbc.api.pojo.PageAndOrderbyParamDto pageAndOrderbyParamDto) {
        Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);
        List<com.feihua.framework.message.dto.BaseMessageDto> list = this.wrapDtos(baseMessagePoMapper.searchBaseMessages(dto));
        return new PageResultDto(list, this.wrapPage(p));
    }

    @Override
    public PageResultDto<UserMessageDto> searchUserMessage(SearchUserMessageConditionDto dto, PageAndOrderbyParamDto pageAndOrderbyParamDto) {
        Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);
        List<UserMessageDto> list = baseMessagePoMapper.searchUserMessage(dto);
        return new PageResultDto(list, this.wrapPage(p));
    }

    @Transactional(rollbackFor = Exception.class)
    @Override
    public void messageSend(final BaseMessageSendParamsDto dto,boolean asyn) {
        if (asyn) {
            Executor executor = SpringContextHolder.getBean("taskExecutor");
            if (executor != null) {
                executor.execute(new Runnable() {
                    @Override
                    public void run() {
                        doSend(dto);
                    }
                });
            }else{
                throw new BaseException("bean name taskExecutor can not be found");
            }
        }else {
            doSend(dto);
        }
    }
    @Transactional(rollbackFor = Exception.class)
    @Override
    public int readMessage(String messageId, String userId,BaseMessageTargetClientParamsDto targetClientParamsDto) {
        BaseMessageTargetClientPo baseMessageTargetClientPo = apiBaseMessageTargetClientPoService.selectByMessageIdAndTargetClient(messageId,targetClientParamsDto,DictEnum.MessageState.sended);
        if (baseMessageTargetClientPo != null) {
            BaseMessageTargetClientUserRelPo baseMessageTargetClientUserRelPo = apiBaseMessageTargetClientUserRelPoService.selectByClientIdAndUserId(baseMessageTargetClientPo.getId(),userId,BasePo.YesNo.N.name());
            if (baseMessageTargetClientUserRelPo != null) {
                baseMessageTargetClientUserRelPo.setIsRead(BasePo.YesNo.Y.name());
                apiBaseMessageTargetClientUserRelPoService.preUpdate(baseMessageTargetClientUserRelPo,targetClientParamsDto.getCurrentUserId());
                int r =  apiBaseMessageTargetClientUserRelPoService.updateByPrimaryKey(baseMessageTargetClientUserRelPo);
                // 检查该用户对该消息的其它客户端是否已全部已读，如果全部已读，标记该用户所有客户端消息已读

                if(checkAllClientsIsRead(messageId,userId)){
                    BaseMessageUserStatePo baseMessageUserStatePo = apiBaseMessageUserStatePoService.selectByMessageIdAndUserId(messageId,userId,BasePo.YesNo.N.name());
                    if (baseMessageUserStatePo != null) {
                        baseMessageUserStatePo.setIsRead(BasePo.YesNo.Y.name());
                        apiBaseMessageUserStatePoService.preUpdate(baseMessageUserStatePo, targetClientParamsDto.getCurrentUserId());
                        apiBaseMessageUserStatePoService.updateByPrimaryKeySelective(baseMessageUserStatePo);
                    }
                }
                return r;
            }
        }
        return 0;
    }

    /**
     * 判断用户是否将消息的所有客户端已读
     * @param messageId
     * @param userId
     * @return
     */
    private boolean checkAllClientsIsRead(String messageId,String userId){
        BaseMessageUserStatePo baseMessageUserStatePo = apiBaseMessageUserStatePoService.selectByMessageIdAndUserId(messageId,userId,BasePo.YesNo.Y.name());
        if (baseMessageUserStatePo != null) return true;


        List<BaseMessageTargetClientPo> targetClientPos = apiBaseMessageTargetClientPoService.selectByMessageId(messageId,null);
        // 先循环检查一是否存在正在发送的客户端情况，如果有说明肯定未读
        for (BaseMessageTargetClientPo targetClientPo : targetClientPos) {
            if(DictEnum.MessageState.sending.name().equals(targetClientPo.getMessageState())){
                return false;
            }
        }
        for (BaseMessageTargetClientPo targetClientPo : targetClientPos) {
            BaseMessageTargetClientUserRelPo baseMessageTargetClientUserRelPo = apiBaseMessageTargetClientUserRelPoService.selectByClientIdAndUserId(targetClientPo.getId(),userId,BasePo.YesNo.N.name());
            if (baseMessageTargetClientUserRelPo != null) {
                return false;
            }

        }
        return true;
    }
    /**
     * 实际发送
     * @param dto
     */
    @Transactional(rollbackFor = Exception.class)
    private void doSend(BaseMessageSendParamsDto dto){

        BaseMessagePo baseMessagePo = null;
        if (StringUtils.isEmpty(dto.getMessageId())){
            baseMessagePo.setMsgState(DictEnum.MessageState.to_be_sended.name());
            baseMessagePo.setTitle(dto.getTitle());
            baseMessagePo.setProfile(dto.getProfile());
            baseMessagePo.setContent(dto.getContent());
            baseMessagePo.setMsgType(dto.getMsgType());
            baseMessagePo.setMsgLevel(dto.getMsgLevel());
            this.preInsert(baseMessagePo,dto.getCurrentUserId());
            baseMessagePo = this.insertSimple(baseMessagePo);
        }else {
            baseMessagePo = this.selectByPrimaryKeySimple(dto.getMessageId(),false);
        }

        if (baseMessagePo != null && DictEnum.MessageState.to_be_sended.name().equals(baseMessagePo.getMsgState())) {
            BaseMessagePo baseMessagePoForUpdate = new BaseMessagePo();
            // 更新消息目标和发送状态
            baseMessagePoForUpdate.setId(baseMessagePo.getId());
            baseMessagePoForUpdate.setTargets(dto.getTargets());
            baseMessagePoForUpdate.setMsgState(DictEnum.MessageState.sending.name());
            this.updateByPrimaryKeySelective(baseMessagePoForUpdate);

            // 每个客户端更新状态为发送中
            for (BaseMessageTargetClientParamsDto baseMessageTargetClientParamsDto : dto.getTargetClients()) {
                ApiMessageSendHandler apiMessageSendHandle = resolveMessageSendHandler(baseMessageTargetClientParamsDto);
                apiMessageSendHandle.addBaseMessageTargetClientPo(baseMessageTargetClientParamsDto,baseMessagePo,DictEnum.MessageState.sending);
            }
            ApiMessageUsersHandler apiMessageUsersHandler = resolveMessageUserHandler(dto.getTargets());


            // 根据目标规则查找人员
            ApiPageIterator<BaseUserPo> userIterator = apiMessageUsersHandler.findUsersByMessageTargets(1,10,dto.getTargets(),dto.getTargetsValue());
            List<BaseUserPo> userPos = null;
            while ((userPos = userIterator.next()) != null  && !userPos.isEmpty()){
                // 插入用户状态数据
                BaseMessageUserStatePo userStatePo = null;
                List<BaseMessageUserStatePo> userStatePos = new ArrayList<>(userPos.size());
                for (BaseUserPo userPo : userPos) {
                    userStatePo = new BaseMessageUserStatePo();
                    userStatePo.setMessageId(baseMessagePo.getId());
                    userStatePo.setIsCanRead(BasePo.YesNo.Y.name());
                    userStatePo.setUserId(userPo.getId());
                    userStatePo.setIsRead(BasePo.YesNo.N.name());
                    apiBaseMessageUserStatePoService.preInsert(userStatePo,dto.getCurrentUserId());
                    userStatePos.add(userStatePo);
                }
                apiBaseMessageUserStatePoService.insertBatch(userStatePos);
                // 遍历客户端
                for (BaseMessageTargetClientParamsDto baseMessageTargetClientParamsDto : dto.getTargetClients()) {
                    // 调用发送
                    ApiMessageSendHandler apiMessageSendHandle = resolveMessageSendHandler(baseMessageTargetClientParamsDto);
                    apiMessageSendHandle.doMessageSend(baseMessageTargetClientParamsDto,baseMessagePo,userPos);

                }
            }

            // 每个客户端更新状态为已发送
            for (BaseMessageTargetClientParamsDto baseMessageTargetClientParamsDto : dto.getTargetClients()) {
                ApiMessageSendHandler apiMessageSendHandle = resolveMessageSendHandler(baseMessageTargetClientParamsDto);
                apiMessageSendHandle.updateMessageTargetClientState(baseMessageTargetClientParamsDto,baseMessagePo,DictEnum.MessageState.sended);
            }

            baseMessagePoForUpdate = new BaseMessagePo();
            // 更新消息发送状态
            baseMessagePoForUpdate.setId(baseMessagePo.getId());
            baseMessagePoForUpdate.setMsgState(DictEnum.MessageState.sended.name());
            this.updateByPrimaryKeySelective(baseMessagePoForUpdate);
        }
    }
    private ApiMessageUsersHandler resolveMessageUserHandler(String targets){
        // 查找目标人
        for (ApiMessageUsersHandler apiMessageUsersHandler : apiMessageUsersHandlers) {
            if(apiMessageUsersHandler.support(targets)){
                return apiMessageUsersHandler;
            }
        }
        throw new BaseException("no ApiMessageUsersHandler implement found for targets=" + targets);
    }
    private ApiMessageSendHandler resolveMessageSendHandler(BaseMessageTargetClientParamsDto targetClient){
        for (ApiMessageSendHandler apiMessageSendHandle : apiMessageSendHandles) {
            if (apiMessageSendHandle.support(targetClient)){

                return apiMessageSendHandle;
            }
        }
        throw new BaseException("no ApiMessageSendHandler implement found for targetClient=" + targetClient.getTargetClient());
    }

}