package com.feihua.framework.message.impl;

import com.feihua.framework.constants.DictEnum;
import com.feihua.framework.message.MsgTemplateUtils;
import com.feihua.framework.message.api.ApiBaseMessagePoService;
import com.feihua.framework.message.api.ApiBaseMessageTemplatePoService;
import com.feihua.framework.message.api.ApiBaseMessageTemplateThirdBindPoService;
import com.feihua.framework.message.api.ApiBaseMessageThirdPoService;
import com.feihua.framework.message.dto.BaseMessageDto;
import com.feihua.framework.message.dto.CreateMessageParamsDto;
import com.feihua.framework.message.dto.SearchUserMessageConditionDto;
import com.feihua.framework.message.dto.UserMessageDto;
import com.feihua.framework.message.mapper.BaseMessagePoMapper;
import com.feihua.framework.message.po.BaseMessagePo;
import com.feihua.framework.message.po.BaseMessageTemplatePo;
import com.feihua.framework.message.po.BaseMessageTemplateThirdBindPo;
import com.feihua.framework.message.po.BaseMessageThirdPo;
import com.feihua.utils.collection.CollectionUtils;
import com.github.pagehelper.Page;
import feihua.jdbc.api.pojo.PageAndOrderbyParamDto;
import feihua.jdbc.api.pojo.PageResultDto;
import feihua.jdbc.api.service.impl.ApiBaseServiceImpl;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * This class was generated by MyBatis Generator.
 * @author yangwei 2018-10-29 19:58:54
 */
@Service
public class ApiBaseMessagePoServiceImpl extends ApiBaseServiceImpl<BaseMessagePo, BaseMessageDto, String> implements ApiBaseMessagePoService {
    @Autowired
    private BaseMessagePoMapper baseMessagePoMapper;

    public ApiBaseMessagePoServiceImpl() {
        super(BaseMessageDto.class);
    }

    @Autowired
    private ApiBaseMessageTemplatePoService apiBaseMessageTemplatePoService;

    @Autowired
    private ApiBaseMessageThirdPoService apiBaseMessageThirdPoService;
    @Autowired
    private ApiBaseMessageTemplateThirdBindPoService apiBaseMessageTemplateThirdBindPoService;

    @Override
    public PageResultDto<BaseMessageDto> searchBaseMessagesDsf(com.feihua.framework.message.dto.SearchBaseMessagesConditionDto dto, feihua.jdbc.api.pojo.PageAndOrderbyParamDto pageAndOrderbyParamDto) {
        Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);
        List<com.feihua.framework.message.dto.BaseMessageDto> list = this.wrapDtos(baseMessagePoMapper.searchBaseMessages(dto));
        return new PageResultDto(list, this.wrapPage(p));
    }

    @Override
    public PageResultDto<UserMessageDto> searchUserMessage(SearchUserMessageConditionDto dto, PageAndOrderbyParamDto pageAndOrderbyParamDto) {
        Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);
        List<UserMessageDto> list = baseMessagePoMapper.searchUserMessage(dto);
        return new PageResultDto(list, this.wrapPage(p));
    }

    public BaseMessagePo addMessage(CreateMessageParamsDto dto){
        BaseMessagePo baseMessagePo = null;
        baseMessagePo = new BaseMessagePo();
        this.replaceTemplateParam(baseMessagePo,dto);

        baseMessagePo.setMsgState(DictEnum.MessageState.to_be_sended.name());
        baseMessagePo.setMsgType(dto.getMsgType());
        baseMessagePo.setMsgLevel(dto.getMsgLevel());
        // 设置模板id
        baseMessagePo.setMessageTemplateId(dto.getMessageTemplateId());
        // 添加
        baseMessagePo = this.preInsert(baseMessagePo,dto.getCurrentUserId());
        baseMessagePo = this.insertSimple(baseMessagePo);
        // 三方消息
        insertMessageThird(baseMessagePo.getId(),dto);
        return baseMessagePo;
    }

    @Override
    public BaseMessagePo updateMessage(CreateMessageParamsDto dto) {
        BaseMessagePo baseMessagePo = null;
        baseMessagePo = this.selectByPrimaryKeySimple(dto.getMessageId(),false);

        this.replaceTemplateParam(baseMessagePo,dto);
        baseMessagePo.setMsgType(dto.getMsgType());
        baseMessagePo.setMsgLevel(dto.getMsgLevel());
        baseMessagePo = this.preUpdate(baseMessagePo,dto.getCurrentUserId());
        this.updateByPrimaryKey(baseMessagePo);

        // 全部删除三方消息
        BaseMessageThirdPo deleteCondition = new BaseMessageThirdPo();
        deleteCondition.setMessageId(dto.getMessageId());
        apiBaseMessageThirdPoService.deleteSelective(deleteCondition);
        // 添加三方消息
        insertMessageThird(baseMessagePo.getId(),dto);
        return baseMessagePo;
    }

    private void insertMessageThird(String messageId,CreateMessageParamsDto dto) {

        // 待插入的三方消息
        List<BaseMessageThirdPo> tobeInsertMessageThirdPo = new ArrayList<>();

        if (StringUtils.isNotEmpty(dto.getMessageTemplateId())){
            BaseMessageTemplatePo templatePo = apiBaseMessageTemplatePoService.selectByPrimaryKeySimple(dto.getMessageTemplateId());
            if (templatePo != null) {
                // 三方模板
                BaseMessageTemplateThirdBindPo messageTemplateThirdBindPoCondition = new BaseMessageTemplateThirdBindPo();
                messageTemplateThirdBindPoCondition.setMessageTemplateId(dto.getMessageTemplateId());
                List<BaseMessageTemplateThirdBindPo> templateThirdBindPos = apiBaseMessageTemplateThirdBindPoService.selectListSimple(messageTemplateThirdBindPoCondition);
                if (!CollectionUtils.isNullOrEmpty(templateThirdBindPos)) {
                    BaseMessageThirdPo tobeInsert = null;
                    for (BaseMessageTemplateThirdBindPo templateThirdBindPo : templateThirdBindPos) {
                        tobeInsert = new BaseMessageThirdPo();
                        tobeInsert.setThirdId(templateThirdBindPo.getThirdId());
                        tobeInsert.setThirdTemplateContent(MsgTemplateUtils.replace(templateThirdBindPo.getThirdTemplateContent(),dto.getTemplateParams()));
                        tobeInsert.setThirdTemplateId(templateThirdBindPo.getThirdTemplateId());
                        tobeInsert.setThirdType(templateThirdBindPo.getThirdType());
                        tobeInsert.setMessageId(messageId);
                        tobeInsert = apiBaseMessageThirdPoService.preInsert(tobeInsert,dto.getCurrentUserId());
                        tobeInsertMessageThirdPo.add(tobeInsert);
                    }
                    apiBaseMessageThirdPoService.insertBatch(tobeInsertMessageThirdPo);

                }
            }
        }
    }
    private void replaceTemplateParam(BaseMessagePo baseMessagePo,CreateMessageParamsDto dto){
        Map<String,String> templateParam = dto.getTemplateParams();
        baseMessagePo.setTitle(MsgTemplateUtils.replace(dto.getTitle(),templateParam));
        baseMessagePo.setProfile(MsgTemplateUtils.replace(dto.getProfile(),templateParam));
        baseMessagePo.setContent(MsgTemplateUtils.replace(dto.getContent(),templateParam));

    }
    @Override
    public BaseMessagePo saveMessage(CreateMessageParamsDto dto) {
        if (StringUtils.isNotEmpty(dto.getMessageId())) {
            return updateMessage(dto);
        } else {
            return addMessage(dto);
        }
    }

    @Override
    public BaseMessageDto wrapDto(BaseMessagePo po) {
        if (po == null) {
            return null;
        }
        BaseMessageDto baseMessageDto = new BaseMessageDto();
        baseMessageDto.setTitle(po.getTitle());
        baseMessageDto.setProfile(po.getProfile());
        baseMessageDto.setContent(po.getContent());
        baseMessageDto.setMsgType(po.getMsgType());
        baseMessageDto.setMsgState(po.getMsgState());
        baseMessageDto.setMsgLevel(po.getMsgLevel());
        baseMessageDto.setUpdateAt(po.getUpdateAt());
        baseMessageDto.setId(po.getId());
        baseMessageDto.setDataOfficeId(po.getDataOfficeId());
        baseMessageDto.setDataUserId(po.getDataUserId());
        baseMessageDto.setDataType(po.getDataType());
        baseMessageDto.setDataAreaId(po.getDataAreaId());
        baseMessageDto.setMessageTemplateId(po.getMessageTemplateId());
        return baseMessageDto;
    }
}