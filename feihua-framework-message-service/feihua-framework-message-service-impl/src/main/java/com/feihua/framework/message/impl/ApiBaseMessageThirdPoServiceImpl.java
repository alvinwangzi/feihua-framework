package com.feihua.framework.message.impl;

import com.feihua.framework.message.api.ApiBaseMessageThirdPoService;
import com.feihua.framework.message.dto.BaseMessageThirdDto;
import com.feihua.framework.message.po.BaseMessageThirdPo;
import com.feihua.utils.collection.CollectionUtils;
import feihua.jdbc.api.pojo.BasePo;
import feihua.jdbc.api.service.impl.ApiBaseServiceImpl;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

/**
 * This class was generated by MyBatis Generator.
 * @author yangwei 2019-05-07 11:35:31
 */
@Service
public class ApiBaseMessageThirdPoServiceImpl extends ApiBaseServiceImpl<BaseMessageThirdPo, BaseMessageThirdDto, String> implements ApiBaseMessageThirdPoService {
    @Autowired
    com.feihua.framework.message.mapper.BaseMessageThirdPoMapper BaseMessageThirdPoMapper;

    public ApiBaseMessageThirdPoServiceImpl() {
        super(BaseMessageThirdDto.class);
    }

    @Override
    public BaseMessageThirdDto wrapDto(BaseMessageThirdPo po) {
        if (po == null) { return null; }
        BaseMessageThirdDto dto = new BaseMessageThirdDto();
        dto.setId(po.getId());
        dto.setMessageId(po.getMessageId());
        dto.setThirdType(po.getThirdType());
        dto.setThirdId(po.getThirdId());
        dto.setThirdTemplateId(po.getThirdTemplateId());
        dto.setThirdTemplateContent(po.getThirdTemplateContent());
        dto.setDataUserId(po.getDataUserId());
        dto.setDataOfficeId(po.getDataOfficeId());
        dto.setDataType(po.getDataType());
        dto.setDataAreaId(po.getDataAreaId());
        dto.setUpdateAt(po.getUpdateAt());
        return dto;
    }

    @Override
    public List<BaseMessageThirdPo> selectByMessageIdAndThirdType(String messageId, String thirdType) {
        if(StringUtils.isAnyEmpty(thirdType,messageId)) return null;
        BaseMessageThirdPo condition = new BaseMessageThirdPo();
        condition.setDelFlag(BasePo.YesNo.N.name());
        condition.setThirdType(thirdType);
        condition.setMessageId(messageId);
        return selectListSimple(condition);
    }

    @Override
    public List<BaseMessageThirdPo> selectByMessageId(String messageId) {
        if(StringUtils.isEmpty(messageId)) return null;
        BaseMessageThirdPo condition = new BaseMessageThirdPo();
        condition.setDelFlag(BasePo.YesNo.N.name());
        condition.setMessageId(messageId);
        return selectListSimple(condition);
    }

    @Override
    public void copyByMessageId(String oldMessageId,String newMessageId,String currentUserId) {
        List<BaseMessageThirdPo> messageThirdPos = selectByMessageId(oldMessageId);
        if (!CollectionUtils.isNullOrEmpty(messageThirdPos)) {
            List<BaseMessageThirdPo> toBeInsert = new ArrayList<>(messageThirdPos.size());
            for (BaseMessageThirdPo messageThirdPo : messageThirdPos) {
                messageThirdPo.setId(null);
                messageThirdPo.setMessageId(newMessageId);
                messageThirdPo = preInsert(messageThirdPo,currentUserId);
                toBeInsert.add(messageThirdPo);
            }
            insertBatch(toBeInsert);
        }
    }
}