package com.feihua.framework.base.impl;

import com.feihua.framework.base.modules.datascope.api.ApiBaseDataScopeService;
import com.feihua.framework.constants.DictEnum;
import com.feihua.framework.base.modules.dict.api.ApiBaseDictPoService;
import com.feihua.framework.base.modules.dict.dto.BaseDictDataScopeDefineDto;
import com.feihua.framework.base.modules.dict.dto.BaseDictDto;
import com.feihua.framework.base.modules.dict.dto.SearchDictsConditionDto;
import com.feihua.framework.base.mapper.BaseDictPoMapper;
import com.feihua.framework.base.modules.dict.dto.SelectDictsConditionDto;
import com.feihua.framework.base.modules.dict.po.BaseDictPo;
import com.feihua.framework.base.modules.office.api.ApiBaseOfficePoService;
import com.feihua.framework.base.modules.office.dto.BaseOfficeDto;
import com.github.pagehelper.Page;
import feihua.jdbc.api.pojo.BasePo;
import feihua.jdbc.api.pojo.Orderby;
import feihua.jdbc.api.pojo.PageAndOrderbyParamDto;
import feihua.jdbc.api.pojo.PageResultDto;
import feihua.jdbc.api.service.impl.ApiBaseTreeServiceImpl;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;

/**
 * This class was generated by MyBatis Generator.
 * @author yangwei 2017-12-21 13:31:23
 */
@Service
public class ApiBaseDictPoServiceImpl extends ApiBaseTreeServiceImpl<BaseDictPo, BaseDictDto, String> implements ApiBaseDictPoService {

    public ApiBaseDictPoServiceImpl() {
        super(BaseDictDto.class);
    }

    @Autowired
    private BaseDictPoMapper baseDictPoMapper;
    @Autowired
    private ApiBaseDataScopeService<BaseDictDataScopeDefineDto> apiBaseDictDataScopeService;
    @Autowired
    private ApiBaseOfficePoService apiBaseOfficePoService;


    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public PageResultDto<BaseDictDto> searchDictsDsf(SearchDictsConditionDto conditionDto, PageAndOrderbyParamDto pageAndOrderbyParamDto) {
        Page p = super.pageAndOrderbyStart(pageAndOrderbyParamDto);
        List<BaseDictDto> list = this.wrapDtos(baseDictPoMapper.searchDicts(conditionDto));
        return new PageResultDto(list, this.wrapPage(p));
    }
    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public List<BaseDictDto> selectByTypeDsf(SelectDictsConditionDto selectDictsConditionDto, Orderby orderby) {
        if(selectDictsConditionDto == null || StringUtils.isEmpty(selectDictsConditionDto.getType())){
            return null;
        }
        List<BaseDictDto> result = null;
        BaseDictPo dictPoCondition = new BaseDictPo();
        dictPoCondition.setType(selectDictsConditionDto.getType());
        dictPoCondition.setDelFlag(BasePo.YesNo.N.name());
        super.orderbyStart(orderby);
        List<BaseDictDto> parentList = this.selectList(dictPoCondition);
        if(CollectionUtils.isNotEmpty(parentList)){
            BaseDictDataScopeDefineDto defineDto = apiBaseDictDataScopeService.selectDataScopeDefineByUserId(selectDictsConditionDto.getCurrentUserId(),selectDictsConditionDto.getCurrentRoleId());
            String officeId = null;
            String areaId = null;
            if(defineDto != null){
                BaseOfficeDto  officeDto = null;
                // 如果按用户走
                if(DictEnum.DictDataScope.user.name().equals(defineDto.getType())){
                    officeDto = apiBaseOfficePoService.selectOfficeByUserId(selectDictsConditionDto.getCurrentUserId());
                }
                // 按角色走
                else if(DictEnum.DictDataScope.role.name().equals(defineDto.getType())){
                    officeDto = apiBaseOfficePoService.selectOfficeByUserId(selectDictsConditionDto.getCurrentRoleId());
                }
                if (officeDto != null) {
                    officeId = officeDto.getId();
                    areaId = officeDto.getAreaId();
                }
            }
            result = new ArrayList<>();
            for (BaseDictDto baseDictDto : parentList) {
                if(BasePo.YesNo.Y.name().equals(baseDictDto.getIsPublic())){
                    result.add(baseDictDto);
                    continue;
                }
                String itemOfficeId = baseDictDto.getDataOfficeId();
                String itemAreaId = baseDictDto.getDataAreaId();
                if(StringUtils.isNotEmpty(itemOfficeId) && itemOfficeId.equals(officeId)){
                    result.add(baseDictDto);
                    continue;
                }else if(StringUtils.isNotEmpty(itemAreaId) && itemAreaId.equals(areaId)){
                    result.add(baseDictDto);
                    continue;
                }
            }
        }
        return result;
    }

    @Override
    public String selectDictLabel(String type,String value){
        if (StringUtils.isEmpty(type) || StringUtils.isEmpty(value)){
            return null;
        }
        BaseDictPo condition = new BaseDictPo();
        condition.setType(type);
        condition.setValue(value);

        condition = this.selectOneSimple(condition);
        return condition == null ? null : condition.getName();
    }

    @Override
    public BaseDictDto wrapDto(BaseDictPo po) {
        if (po == null) {
            return null;
        }
        BaseDictDto baseDictDto = new BaseDictDto();
        baseDictDto.setName(po.getName());
        baseDictDto.setValue(po.getValue());
        baseDictDto.setDataOfficeId(po.getDataOfficeId());
        baseDictDto.setDiscription(po.getDiscription());
        baseDictDto.setParentId(po.getParentId());
        baseDictDto.setLevel(po.getLevel());
        baseDictDto.setId(po.getId());
        baseDictDto.setSequence(po.getSequence());
        baseDictDto.setType(po.getType());
        baseDictDto.setDataUserId(po.getDataUserId());
        baseDictDto.setIsPublic(po.getIsPublic());
        baseDictDto.setDataType(po.getDataType());
        baseDictDto.setDataAreaId(po.getDataAreaId());
        baseDictDto.setIsSystem(po.getIsSystem());
        baseDictDto.setUpdateAt(po.getUpdateAt());
        return baseDictDto;
    }
}