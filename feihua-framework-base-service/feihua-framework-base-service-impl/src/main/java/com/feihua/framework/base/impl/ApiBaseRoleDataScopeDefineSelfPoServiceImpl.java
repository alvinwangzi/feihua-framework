package com.feihua.framework.base.impl;

import com.feihua.framework.base.modules.role.dto.BaseRoleDataScopeDefineSelfDto;
import com.feihua.framework.base.modules.role.po.BaseRoleDataScopeDefineSelfPo;
import com.feihua.framework.base.modules.role.api.ApiBaseRoleDataScopeDefineSelfPoService;
import com.feihua.framework.base.modules.role.dto.BaseRoleDataScopeDefineSelfDto;
import com.feihua.framework.base.modules.role.po.BaseRoleDataScopeDefineSelfPo;
import feihua.jdbc.api.pojo.BasePo;
import feihua.jdbc.api.service.impl.ApiBaseServiceImpl;
import org.apache.commons.collections.CollectionUtils;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;

/**
 * This class was generated by MyBatis Generator.
 * @author yangwei 2018-03-19 19:28:24
 */
@Service
public class ApiBaseRoleDataScopeDefineSelfPoServiceImpl extends ApiBaseServiceImpl<BaseRoleDataScopeDefineSelfPo, BaseRoleDataScopeDefineSelfDto, String> implements ApiBaseRoleDataScopeDefineSelfPoService {

    public ApiBaseRoleDataScopeDefineSelfPoServiceImpl() {
        super(BaseRoleDataScopeDefineSelfDto.class);
    }



    @Transactional(rollbackFor = Exception.class)
    @Override
    public int insertRoleSelf(List<String> roleIds, String roleDataScopeDefineId, String currentUserId) {
        int r = 0;
        if(CollectionUtils.isNotEmpty(roleIds)){
            List<BaseRoleDataScopeDefineSelfPo> preInsertList = new ArrayList<>(roleIds.size());
            for (String roleId : roleIds) {
                // 自定义角色
                BaseRoleDataScopeDefineSelfPo baseCommonDataScopeDefineRoleSelfPo = new BaseRoleDataScopeDefineSelfPo();
                baseCommonDataScopeDefineRoleSelfPo.setRoleDataScopeDefineId(roleDataScopeDefineId);
                baseCommonDataScopeDefineRoleSelfPo.setRoleId(roleId);
                baseCommonDataScopeDefineRoleSelfPo = this.preInsert(baseCommonDataScopeDefineRoleSelfPo,currentUserId);
                preInsertList.add(baseCommonDataScopeDefineRoleSelfPo);
            }
            // 批量插入自定义角色
            r = this.insertBatch(preInsertList);
        }
        return r;
    }
    @Transactional(rollbackFor = Exception.class)
    @Override
    public int deleteRoleSelfByRoleDataScopeDefineId(String roleDataScopeDefineId, String currentUserId) {
        //先删除掉以前的配置
        BaseRoleDataScopeDefineSelfPo deleteCondition = new BaseRoleDataScopeDefineSelfPo();
        deleteCondition.setRoleDataScopeDefineId(roleDataScopeDefineId);
        int r = this.deleteFlagSelectiveWithUpdateUser(deleteCondition,currentUserId);

        return r;
    }

    @Override
    public List<BaseRoleDataScopeDefineSelfDto> selectByRoleDataScopeDefineId(String roleDataScopeDefineId) {
        BaseRoleDataScopeDefineSelfPo condition = new BaseRoleDataScopeDefineSelfPo();
        condition.setRoleDataScopeDefineId(roleDataScopeDefineId);
        condition.setDelFlag(BasePo.YesNo.N.name());
        return this.selectList(condition);
    }

    @Override
    public BaseRoleDataScopeDefineSelfDto wrapDto(BaseRoleDataScopeDefineSelfPo po) {
        if (po == null) {
            return null;
        }
        BaseRoleDataScopeDefineSelfDto selfDto = new BaseRoleDataScopeDefineSelfDto();
        selfDto.setRoleDataScopeDefineId(po.getRoleDataScopeDefineId());
        selfDto.setDataOfficeId(po.getDataOfficeId());
        selfDto.setDataAreaId(po.getDataAreaId());
        selfDto.setUpdateAt(po.getUpdateAt());
        selfDto.setId(po.getId());
        selfDto.setDataUserId(po.getDataUserId());
        selfDto.setDataType(po.getDataType());
        selfDto.setRoleId(po.getRoleId());
        return selfDto;
    }
}