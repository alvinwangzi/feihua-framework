package com.feihua.framework.base.impl;

import com.feihua.exception.BaseException;
import com.feihua.exception.DataConflictException;
import com.feihua.framework.base.modules.datascope.api.ApiBaseDataScopeService;
import com.feihua.framework.constants.DictEnum;
import com.feihua.framework.base.modules.office.api.ApiBaseOfficeDataScopeDefinePoService;
import com.feihua.framework.base.modules.office.api.ApiBaseOfficeDataScopeDefineSelfPoService;
import com.feihua.framework.base.modules.office.dto.BaseOfficeDataScopeDefineDto;
import com.feihua.framework.base.modules.office.dto.OfficeDataScopeParamDto;
import com.feihua.framework.base.modules.office.po.BaseOfficeDataScopeDefinePo;
import com.feihua.framework.base.modules.rel.api.ApiBaseRoleDataScopeRelPoService;
import com.feihua.framework.base.modules.rel.api.ApiBaseUserDataScopeRelPoService;
import com.feihua.framework.base.modules.rel.dto.BaseRoleDataScopeRelDto;
import com.feihua.framework.base.modules.rel.dto.BaseUserDataScopeRelDto;
import feihua.jdbc.api.pojo.BasePo;
import feihua.jdbc.api.service.impl.ApiBaseServiceImpl;
import org.apache.commons.collections.CollectionUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;

/**
 * This class was generated by MyBatis Generator.
 * @author yangwei 2018-03-19 18:39:44
 */
@Service
public class ApiBaseOfficeDataScopeDefinePoServiceImpl extends ApiBaseServiceImpl<BaseOfficeDataScopeDefinePo, BaseOfficeDataScopeDefineDto, String> implements ApiBaseOfficeDataScopeDefinePoService ,ApiBaseDataScopeService<BaseOfficeDataScopeDefineDto> {

    public ApiBaseOfficeDataScopeDefinePoServiceImpl() {
        super(BaseOfficeDataScopeDefineDto.class);
    }

    @Autowired
    private ApiBaseOfficeDataScopeDefineSelfPoService apiBaseOfficeDataScopeDefineSelfPoService;
    @Autowired
    private ApiBaseUserDataScopeRelPoService apiBaseUserDataScopeRelPoService;
    @Autowired
    private ApiBaseRoleDataScopeRelPoService apiBaseRoleDataScopeRelPoService;
    @Autowired
    private DataScopeConflictService dataScopeConflictService;


    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public BaseOfficeDataScopeDefineDto selectByDataScopeId(String dataScopeId) {
        BaseOfficeDataScopeDefinePo condition = new BaseOfficeDataScopeDefinePo();
        condition.setDataScopeId(dataScopeId);
        condition.setDelFlag(BasePo.YesNo.N.name());
        return this.selectOne(condition);
    }
    @Transactional(rollbackFor = Exception.class)
    @Override
    public BaseOfficeDataScopeDefineDto setOfficeDataScope(OfficeDataScopeParamDto officeDataScope) {
        // 先查询是否已经设置
        BaseOfficeDataScopeDefinePo condition = new BaseOfficeDataScopeDefinePo();
        condition.setDataScopeId(officeDataScope.getDataScopeId());
        condition.setDelFlag(BasePo.YesNo.N.name());
        BaseOfficeDataScopeDefinePo dbOfficeDataScopeDefinePo = this.selectOneSimple(condition);
        // 如果没有设置
        if(dbOfficeDataScopeDefinePo == null){
            dbOfficeDataScopeDefinePo = new BaseOfficeDataScopeDefinePo();
            dbOfficeDataScopeDefinePo.setDataScopeId(officeDataScope.getDataScopeId());
            dbOfficeDataScopeDefinePo.setType(officeDataScope.getType());
            this.preInsert(dbOfficeDataScopeDefinePo,officeDataScope.getCurrentUserId());
            dbOfficeDataScopeDefinePo = this.insertSimple(dbOfficeDataScopeDefinePo);
            if(dbOfficeDataScopeDefinePo == null){
                throw new BaseException("add officeDataScopeDefine return null","E500");
            }
            // 如果是自定义且自定义勾选不为空，添加自定义数据
            if(DictEnum.OfficeDataScope.self.name().equals(officeDataScope.getType())
                    && CollectionUtils.isNotEmpty(officeDataScope.getOfficeIds())){
                int r = apiBaseOfficeDataScopeDefineSelfPoService.insertOfficeSelf(officeDataScope.getOfficeIds(),dbOfficeDataScopeDefinePo.getId(),officeDataScope.getCurrentUserId());
                // 如果失败
                if(r <= 0){
                    throw new BaseException("add officeDataScopeDefineSelf return " + r,"E500");
                }
            }
            return this.wrapDto(dbOfficeDataScopeDefinePo);
        }
        // 如果已经设置
        else{
            dbOfficeDataScopeDefinePo.setType(officeDataScope.getType());
            this.preUpdate(dbOfficeDataScopeDefinePo,officeDataScope.getCurrentUserId());
            // 这里没有用乐观锁
            int updateR = this.updateByPrimaryKeySelective(dbOfficeDataScopeDefinePo);
            // 更新失败
            if(updateR <= 0){
                throw new BaseException("update officeDataScopeDefine return " + updateR,"E500");
            }
            // 更新成功后
            else{
                // 先删除掉以前配置的自定义勾选
                int deleteR = apiBaseOfficeDataScopeDefineSelfPoService.deleteOfficeSelfByOfficeDataScopeDefineId(dbOfficeDataScopeDefinePo.getId(),officeDataScope.getCurrentUserId());

                if(DictEnum.OfficeDataScope.self.name().equals(officeDataScope.getType())
                        && CollectionUtils.isNotEmpty(officeDataScope.getOfficeIds())){
                    int insertR = apiBaseOfficeDataScopeDefineSelfPoService.insertOfficeSelf(officeDataScope.getOfficeIds(),dbOfficeDataScopeDefinePo.getId(),officeDataScope.getCurrentUserId());
                    // 如果失败
                    if(insertR <= 0){
                        throw new BaseException("add officeDataScopeDefineSelf return " + insertR,"E500");
                    }
                }
            }

            //检测冲突
            dataScopeConflictService.checkConflict(dbOfficeDataScopeDefinePo.getDataScopeId(),this);
            return this.wrapDto(dbOfficeDataScopeDefinePo);
        }
    }
    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public BaseOfficeDataScopeDefineDto selectDataScopeDefineByUserId(String userId,String roleId) {
        List<BaseUserDataScopeRelDto> userDataScopeRelDtos = apiBaseUserDataScopeRelPoService.selectByUserId(userId);
        // 用户设置了数据范围，以该数据范围优先
        if(CollectionUtils.isNotEmpty(userDataScopeRelDtos)){
            for (BaseUserDataScopeRelDto userDataScopeRelDto : userDataScopeRelDtos) {
                BaseOfficeDataScopeDefineDto defineDto = this.selectByDataScopeId(userDataScopeRelDto.getDataScopeId());
                // 如果一个用户设置了多个数据范围，以有权限的数据范围优先
                if(defineDto != null && !DictEnum.OfficeDataScope.no.name().equals(defineDto.getType())){
                    return defineDto;
                }
            }

        }
        // 取角色设置的数据范围
        else{
            List<BaseRoleDataScopeRelDto> roleDataScopeRelDtos = apiBaseRoleDataScopeRelPoService.selectByRoleId(roleId);
            if(CollectionUtils.isNotEmpty(roleDataScopeRelDtos)){
                for (BaseRoleDataScopeRelDto roleDataScopeRelDto : roleDataScopeRelDtos) {
                    BaseOfficeDataScopeDefineDto defineDto = this.selectByDataScopeId(roleDataScopeRelDto.getDataScopeId());
                    // 如果一个角色设置了多个数据范围，以有权限的数据范围优先
                    if(defineDto != null && !DictEnum.OfficeDataScope.no.name().equals(defineDto.getType())){
                        return defineDto;
                    }
                }
            }
        }
        return null;
    }

    @Override
    public boolean isAllData(BaseOfficeDataScopeDefineDto dataScopeDefine) {
        if (dataScopeDefine != null && DictEnum.OfficeDataScope.all.name().equals(dataScopeDefine.getType())) {
            return true;
        }
        return false;
    }

    @Override
    public void checkConflict(List<String> dataScopeIds) throws BaseException {
        if(CollectionUtils.isNotEmpty(dataScopeIds)){
            List<BaseOfficeDataScopeDefineDto> list = new ArrayList<>();
            for (String dataScopeId : dataScopeIds) {
                BaseOfficeDataScopeDefineDto definePo = this.selectByDataScopeId(dataScopeId);
                if(definePo != null && !DictEnum.RoleDataScope.no.name().equals(definePo.getType())){
                    list.add(definePo);
                }
            }
            if(CollectionUtils.isNotEmpty(list)){
                throw new DataConflictException("office dataScope conflict!",DictEnum.DataResource.office.name());
            }
        }
    }

    @Override
    public BaseOfficeDataScopeDefineDto wrapDto(BaseOfficeDataScopeDefinePo po) {
        if (po == null) {
            return null;
        }
        BaseOfficeDataScopeDefineDto officeDataScopeDefineDto = new BaseOfficeDataScopeDefineDto();
        officeDataScopeDefineDto.setDataScopeId(po.getDataScopeId());
        officeDataScopeDefineDto.setDataOfficeId(po.getDataOfficeId());
        officeDataScopeDefineDto.setDataType(po.getDataType());
        officeDataScopeDefineDto.setDataAreaId(po.getDataAreaId());
        officeDataScopeDefineDto.setId(po.getId());
        officeDataScopeDefineDto.setUpdateAt(po.getUpdateAt());
        officeDataScopeDefineDto.setType(po.getType());
        officeDataScopeDefineDto.setDataUserId(po.getDataUserId());
        return officeDataScopeDefineDto;
    }
}