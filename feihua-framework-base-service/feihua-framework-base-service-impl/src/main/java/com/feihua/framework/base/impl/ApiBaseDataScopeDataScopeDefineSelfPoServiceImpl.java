package com.feihua.framework.base.impl;

import com.feihua.framework.base.modules.datascope.api.ApiBaseDataScopeDataScopeDefineSelfPoService;
import com.feihua.framework.base.modules.datascope.dto.BaseDataScopeDataScopeDefineSelfDto;
import com.feihua.framework.base.modules.datascope.po.BaseDataScopeDataScopeDefineSelfPo;
import feihua.jdbc.api.pojo.BasePo;
import feihua.jdbc.api.service.impl.ApiBaseServiceImpl;
import org.apache.commons.collections.CollectionUtils;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;

/**
 * This class was generated by MyBatis Generator.
 * @author yangwei 2018-03-23 17:36:18
 */
@Service
public class ApiBaseDataScopeDataScopeDefineSelfPoServiceImpl extends ApiBaseServiceImpl<BaseDataScopeDataScopeDefineSelfPo, BaseDataScopeDataScopeDefineSelfDto, String> implements ApiBaseDataScopeDataScopeDefineSelfPoService {

    public ApiBaseDataScopeDataScopeDefineSelfPoServiceImpl() {
        super(BaseDataScopeDataScopeDefineSelfDto.class);
    }
    @Transactional(rollbackFor = Exception.class)
    @Override
    public int insertDataScopeSelf(List<String> dataScopeIds, String dataScopeDataScopeDefineId, String currentUserId) {
        int r = 0;
        if(CollectionUtils.isNotEmpty(dataScopeIds)){
            List<BaseDataScopeDataScopeDefineSelfPo> preInsertList = new ArrayList<>(dataScopeIds.size());
            for (String dataScopeId : dataScopeIds) {
                // 自定义角色
                BaseDataScopeDataScopeDefineSelfPo baseCommonDataScopeDefineDataScopeSelfPo = new BaseDataScopeDataScopeDefineSelfPo();
                baseCommonDataScopeDefineDataScopeSelfPo.setDataScopeDataScopeDefineId(dataScopeDataScopeDefineId);
                baseCommonDataScopeDefineDataScopeSelfPo.setDataScopeId(dataScopeId);
                this.preInsert(baseCommonDataScopeDefineDataScopeSelfPo,currentUserId);
                preInsertList.add(baseCommonDataScopeDefineDataScopeSelfPo);
            }
            // 批量插入自定义角色
            r = this.insertBatch(preInsertList);
        }
        return r;
    }

    @Override
    public int deleteDataScopeSelfByDataScopeDataScopeDefineId(String dataScopeDataScopeDefineId, String currentUserId) {
        //先删除掉以前的配置
        BaseDataScopeDataScopeDefineSelfPo deleteCondition = new BaseDataScopeDataScopeDefineSelfPo();
        deleteCondition.setDataScopeDataScopeDefineId(dataScopeDataScopeDefineId);
        int r = this.deleteFlagSelectiveWithUpdateUser(deleteCondition,currentUserId);

        return r;
    }

    @Override
    public List<BaseDataScopeDataScopeDefineSelfDto> selectByDataScopeDataScopeDefineId(String dataScopeDataScopeDefineId) {
        BaseDataScopeDataScopeDefineSelfPo condition = new BaseDataScopeDataScopeDefineSelfPo();
        condition.setDataScopeDataScopeDefineId(dataScopeDataScopeDefineId);
        condition.setDelFlag(BasePo.YesNo.N.name());
        return this.selectList(condition);
    }

    @Override
    public BaseDataScopeDataScopeDefineSelfDto wrapDto(BaseDataScopeDataScopeDefineSelfPo po) {
        if (po == null) {
            return null;
        }
        BaseDataScopeDataScopeDefineSelfDto baseDataScopeDataScopeDefineSelfDto = new BaseDataScopeDataScopeDefineSelfDto();
        baseDataScopeDataScopeDefineSelfDto.setDataScopeId(po.getDataScopeId());
        baseDataScopeDataScopeDefineSelfDto.setDataOfficeId(po.getDataOfficeId());
        baseDataScopeDataScopeDefineSelfDto.setDataScopeDataScopeDefineId(po.getDataScopeDataScopeDefineId());
        baseDataScopeDataScopeDefineSelfDto.setDataUserId(po.getDataUserId());
        baseDataScopeDataScopeDefineSelfDto.setUpdateAt(po.getUpdateAt());
        baseDataScopeDataScopeDefineSelfDto.setId(po.getId());
        baseDataScopeDataScopeDefineSelfDto.setDataType(po.getDataType());
        baseDataScopeDataScopeDefineSelfDto.setDataAreaId(po.getDataAreaId());
        return baseDataScopeDataScopeDefineSelfDto;
    }
}