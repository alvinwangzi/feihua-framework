package com.feihua.framework.base.impl;

import com.feihua.framework.base.modules.user.api.ApiBaseUserAuthPoService;
import com.feihua.framework.base.modules.user.dto.BaseUserAuthDto;
import com.feihua.framework.base.modules.user.po.BaseUserAuthPo;
import feihua.jdbc.api.pojo.BasePo;
import feihua.jdbc.api.service.impl.ApiBaseServiceImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * This class was generated by MyBatis Generator.
 * @author yangwei 2018-04-19 15:34:24
 */
@Service
public class ApiBaseUserAuthPoServiceImpl extends ApiBaseServiceImpl<BaseUserAuthPo, BaseUserAuthDto, String> implements ApiBaseUserAuthPoService {
    @Autowired
    com.feihua.framework.base.mapper.BaseUserAuthPoMapper BaseUserAuthPoMapper;

    public ApiBaseUserAuthPoServiceImpl() {
        super(BaseUserAuthDto.class);
    }
    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public List<BaseUserAuthDto> selectByUserId(String userId) {
        BaseUserAuthPo baseUserAuthPo = new BaseUserAuthPo();
        baseUserAuthPo.setUserId(userId);
        baseUserAuthPo.setDelFlag(BasePo.YesNo.N.name());
        return this.selectList(baseUserAuthPo);
    }
    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public BaseUserAuthDto selectByUserIdAndType(String userId, String type) {
        BaseUserAuthPo baseUserAuthPo = new BaseUserAuthPo();
        baseUserAuthPo.setUserId(userId);
        baseUserAuthPo.setDelFlag(BasePo.YesNo.N.name());
        baseUserAuthPo.setIdentityType(type);
        return this.selectOne(baseUserAuthPo);
    }
    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public BaseUserAuthDto selectByIdentifierAndType(String identifier, String type) {
        BaseUserAuthPo baseUserAuthPo = new BaseUserAuthPo();
        baseUserAuthPo.setIdentifier(identifier);
        baseUserAuthPo.setDelFlag(BasePo.YesNo.N.name());
        baseUserAuthPo.setIdentityType(type);
        return this.selectOne(baseUserAuthPo);
    }
    @Transactional( propagation = Propagation.SUPPORTS, readOnly = true )
    @Override
    public String selectCredential(String userId, String identityType) {
        BaseUserAuthPo baseUserAuthPo = new BaseUserAuthPo();
        baseUserAuthPo.setUserId(userId);
        baseUserAuthPo.setDelFlag(BasePo.YesNo.N.name());
        baseUserAuthPo.setIdentityType(identityType);
        baseUserAuthPo =  this.selectOneSimple(baseUserAuthPo);
        if (baseUserAuthPo == null) {
            return null;
        }
        return baseUserAuthPo.getCredential();
    }
    @Transactional(rollbackFor = Exception.class,readOnly = false)
    @Override
    public int updateCredential(String password,String userId,String currentUserId,String ...identityTypes) {
        int r = 0;
        for (String identityType : identityTypes) {
            BaseUserAuthPo baseUserAuthPo = new BaseUserAuthPo();
            baseUserAuthPo.setCredential(password);

            BaseUserAuthPo baseUserAuthCondition = new BaseUserAuthPo();
            baseUserAuthCondition.setUserId(userId);
            baseUserAuthCondition.setIdentityType(identityType);
            baseUserAuthCondition.setDelFlag(BasePo.YesNo.N.name());
            baseUserAuthPo = this.preUpdate(baseUserAuthPo,currentUserId);
            r += this.updateSelective(baseUserAuthPo,baseUserAuthCondition);
        }

        return r;
    }

    @Override
    public BaseUserAuthDto wrapDto(BaseUserAuthPo po) {
        if (po == null) {
            return null;
        }
        BaseUserAuthDto baseUserAuthDto = new BaseUserAuthDto();
        baseUserAuthDto.setId(po.getId());
        baseUserAuthDto.setUserId(po.getUserId());
        baseUserAuthDto.setIdentifier(po.getIdentifier());
        baseUserAuthDto.setVerified(po.getVerified());
        baseUserAuthDto.setLastTime(po.getLastTime());
        baseUserAuthDto.setCredential(po.getCredential());
        baseUserAuthDto.setLastIp(po.getLastIp());
        baseUserAuthDto.setDataUserId(po.getDataUserId());
        baseUserAuthDto.setDataType(po.getDataType());
        baseUserAuthDto.setUpdateAt(po.getUpdateAt());
        baseUserAuthDto.setDataAreaId(po.getDataAreaId());
        baseUserAuthDto.setDataOfficeId(po.getDataOfficeId());
        baseUserAuthDto.setIdentityType(po.getIdentityType());
        return baseUserAuthDto;
    }
}