package com.feihua.framework.base.impl;

import com.feihua.framework.base.modules.office.api.ApiBaseOfficeDataScopeDefineSelfPoService;
import com.feihua.framework.base.modules.office.dto.BaseOfficeDataScopeDefineSelfDto;
import com.feihua.framework.base.modules.office.po.BaseOfficeDataScopeDefineSelfPo;
import feihua.jdbc.api.pojo.BasePo;
import feihua.jdbc.api.service.impl.ApiBaseServiceImpl;
import org.apache.commons.collections.CollectionUtils;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;

/**
 * This class was generated by MyBatis Generator.
 * @author yangwei 2018-03-19 18:39:44
 */
@Service
public class ApiBaseOfficeDataScopeDefineSelfPoServiceImpl extends ApiBaseServiceImpl<BaseOfficeDataScopeDefineSelfPo, BaseOfficeDataScopeDefineSelfDto, String> implements ApiBaseOfficeDataScopeDefineSelfPoService {

    public ApiBaseOfficeDataScopeDefineSelfPoServiceImpl() {
        super(BaseOfficeDataScopeDefineSelfDto.class);
    }


    @Transactional(rollbackFor = Exception.class)
    @Override
    public int insertOfficeSelf(List<String> officeIds, String officeDataScopeDefineId, String currentUserId) {
        int r = 0;
        if(CollectionUtils.isNotEmpty(officeIds)){
            List<BaseOfficeDataScopeDefineSelfPo> preInsertList = new ArrayList<>(officeIds.size());
            for (String officeId : officeIds) {
                // 自定义机构
                BaseOfficeDataScopeDefineSelfPo baseCommonDataScopeDefineOfficeSelfPo = new BaseOfficeDataScopeDefineSelfPo();
                baseCommonDataScopeDefineOfficeSelfPo.setOfficeDataScopeDefineId(officeDataScopeDefineId);
                baseCommonDataScopeDefineOfficeSelfPo.setOfficeId(officeId);
                baseCommonDataScopeDefineOfficeSelfPo = this.preInsert(baseCommonDataScopeDefineOfficeSelfPo,currentUserId);
                preInsertList.add(baseCommonDataScopeDefineOfficeSelfPo);
            }
            // 批量插入自定义机构
            r = this.insertBatch(preInsertList);
        }
        return r;
    }
    @Transactional(rollbackFor = Exception.class)
    @Override
    public int deleteOfficeSelfByOfficeDataScopeDefineId(String officeDataScopeDefineId, String currentUserId) {
        //先删除掉以前的配置
        BaseOfficeDataScopeDefineSelfPo deleteCondition = new BaseOfficeDataScopeDefineSelfPo();
        deleteCondition.setOfficeDataScopeDefineId(officeDataScopeDefineId);
        int r = this.deleteFlagSelectiveWithUpdateUser(deleteCondition,currentUserId);

        return r;
    }

    @Override
    public List<BaseOfficeDataScopeDefineSelfDto> selectByOfficeDataScopeDefineId(String officeDataScopeDefineId) {
        BaseOfficeDataScopeDefineSelfPo condition = new BaseOfficeDataScopeDefineSelfPo();
        condition.setOfficeDataScopeDefineId(officeDataScopeDefineId);
        condition.setDelFlag(BasePo.YesNo.N.name());
        return this.selectList(condition);
    }

    @Override
    public BaseOfficeDataScopeDefineSelfDto wrapDto(BaseOfficeDataScopeDefineSelfPo po) {
        if (po == null) {
            return null;
        }
        BaseOfficeDataScopeDefineSelfDto baseOfficeDataScopeDefineSelfDto = new BaseOfficeDataScopeDefineSelfDto();
        baseOfficeDataScopeDefineSelfDto.setOfficeDataScopeDefineId(po.getOfficeDataScopeDefineId());
        baseOfficeDataScopeDefineSelfDto.setDataOfficeId(po.getDataOfficeId());
        baseOfficeDataScopeDefineSelfDto.setOfficeId(po.getOfficeId());
        baseOfficeDataScopeDefineSelfDto.setDataAreaId(po.getDataAreaId());
        baseOfficeDataScopeDefineSelfDto.setDataUserId(po.getDataUserId());
        baseOfficeDataScopeDefineSelfDto.setId(po.getId());
        baseOfficeDataScopeDefineSelfDto.setDataType(po.getDataType());
        baseOfficeDataScopeDefineSelfDto.setUpdateAt(po.getUpdateAt());
        return baseOfficeDataScopeDefineSelfDto;
    }
}